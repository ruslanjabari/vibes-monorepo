import SkiaBreathe from "./skia/Breathe";
import Ionicons from "@expo/vector-icons/Ionicons";
import { NavigationContainer, RouteProp } from "@react-navigation/native";
import { BottomTabNavigationOptions, createBottomTabNavigator } from "@react-navigation/bottom-tabs";
import Num from "./num/num";
import { SafeAreaView } from "react-native";
import { useContext, useEffect, useState } from 'react';
import { LevelContext } from './context';
import Deque from './deque'

type Tabs = { Num: undefined; Skia: undefined };

const { Navigator, Screen } = createBottomTabNavigator<Tabs>();

const reanimatedOptions = (props: { route: RouteProp<Tabs, "Skia">; navigation: any }): BottomTabNavigationOptions => {
  return {
    tabBarIcon: ({ color, size }) => {
      return <Ionicons name="chevron-back-sharp" color={color} size={size} />;
    },
  };
};

const skiaOptions = (props: { route: RouteProp<Tabs, "Num">; navigation: any }): BottomTabNavigationOptions => {
  return {
    tabBarIcon: ({ color, size }) => {
      return <Ionicons name="chevron-forward-sharp" color={color} size={size} />;
    },
  };
};

const hrvDeque = new Deque(5);
const heartDeque = new Deque(5);

export default function App() {
  const [data, setData] = useState({ heartRate: 1, hrv: 1 });
 

  useEffect(() => {
    const ws = new WebSocket('ws://0291-68-65-175-24.ngrok.io/ws'); // generated by ngrok so need to replace everytime
    ws.onopen = () => {
      console.log("connected");
      ws.send('connection established!'); // send a message
    }
    ws.onmessage = (e) => {
      // a message was received
      console.log("in message handler", e.data);
      if (`${e.data}`.includes("connection")) return;
      const parsed = JSON.parse(`${JSON.parse(JSON.stringify(e.data))}`);
      if (parsed["sample_type"] === "HKQuantityTypeIdentifierHeartRate") {
        if (heartDeque.size === 5) heartDeque.removeLast(); 
        heartDeque.addFirst(`${parsed["value"]}`.split(' ')[0]);
      } else if (parsed["sample_type"] === "HKQuantityTypeIdentifierHeartRateVariabilitySDNN") {
        if (hrvDeque.size === 5) hrvDeque.removeLast();
        hrvDeque.addFirst(`${parsed["value"]}`.split(' ')[0]);
      } else {}

    };
  
    ws.onerror = (e) => {
      // an error occurred
      console.log(e);
    };
  
    ws.onclose = (e) => {
      // connection closed
      console.log(e.code, e.reason);
    };

    setTimeout(() => {
      setData({ heartRate: 73, hrv: 41})
    }, 2000)

    const timer = setInterval(() => {

      const heartSize = heartDeque.size
      let numHeartReads = 0;
      for (let i = 0; i < heartSize; i++) {
        numHeartReads+= parseInt(heartDeque.removeFirst()) ?? 0;
      }

      const hrvSize = hrvDeque.size
      let numHRVReads = 0;
      for (let i = 0; i < hrvSize; i++) {
        numHRVReads+= parseInt(hrvDeque.removeFirst()) ?? 0;
      }

      setData({ heartRate: parseInt((numHeartReads/heartSize).toFixed(0) ?? 0), hrv: parseInt((numHRVReads/hrvSize).toFixed(0) ?? 0) });

    }, 10000)

    return () => {
      clearInterval(timer);
      ws.close()
    }
  }, [])

  return (
    <LevelContext.Provider value={data}>
    <SafeAreaView style={{flex: 10, backgroundColor: 'black' }}>
      <NavigationContainer>
        <Navigator
          sceneContainerStyle={{ backgroundColor: "black" }}
          screenOptions={{
            tabBarShowLabel: false,
            headerShown: false,
            headerTintColor: "#59ADA1",
            headerStyle: { backgroundColor: "#111" },
            headerShadowVisible: false,
            tabBarActiveTintColor: "#59ADA1",
            tabBarActiveBackgroundColor: "#000",
            tabBarInactiveBackgroundColor: "#000",
            tabBarStyle: { borderTopColor: "#222", borderTopWidth: 1 },
          }}
        >
          <Screen name="Skia" component={SkiaBreathe} options={reanimatedOptions} />
          <Screen name="Num" component={Num} options={skiaOptions} />
        </Navigator>
      </NavigationContainer>
    </SafeAreaView>
    <SafeAreaView style={{ backgroundColor: 'black' }}>
    </SafeAreaView>
    </LevelContext.Provider>
  );
}